---
- name: Find all yml files in /.github/workflows recursively
  ansible.builtin.find:
    paths: "{{ dest_folder }}"
    file_type: file
    patterns: "*.yml,*.yaml"
    recurse: true
  register: found_files
  tags: update

- name: Replace 'actions/checkout@v2' with 'actions/checkout@v3'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: actions/checkout@v2"
    replace: "uses: actions/checkout@v3"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'aws-actions/configure-aws-credentials@v1' with 'aws-actions/configure-aws-credentials@v2'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: aws-actions/configure-aws-credentials@v1"
    replace: "uses: aws-actions/configure-aws-credentials@v2"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'hashicorp/setup-terraform@v1' with 'hashicorp/setup-terraform@v2'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: hashicorp/setup-terraform@v1"
    replace: "uses: hashicorp/setup-terraform@v2"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'actions/setup-python@v1/v2/v3' with 'actions/setup-python@v4'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: actions/setup-python@(v1|v2|v3)"
    replace: "uses: actions/setup-python@v4"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'actions/setup-node@v1/v2' with 'actions/setup-node@v3'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: actions/setup-node@(v1|v2)"
    replace: "uses: actions/setup-node@v3"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'actions/setup-java@v1/v2' with 'actions/setup-java@v3'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: actions/setup-java@(v1|v2)"
    replace: "uses: actions/setup-java@v3"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace '::set-output name=(.*)::(.*)' pattern
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "::set-output name=(.*)::(.*)"
    replace: '\1=\2 >> $GITHUB_OUTPUT'
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'actions/upload-artifact@v2' with 'actions/upload-artifact@v3'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: actions/upload-artifact@v2"
    replace: "uses: actions/upload-artifact@v3"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'actions/download-artifact@v2' with 'actions/download-artifact@v3'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: actions/download-artifact@v2"
    replace: "uses: actions/download-artifact@v3"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'actions/cache@v2' with 'actions/cache@v3'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: actions/cache@v2"
    replace: "uses: actions/cache@v3"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'slackapi/slack-github-action@v1.18.0' with 'slackapi/slack-github-action@v1.23.0'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: "uses: slackapi/slack-github-action@v1.18.0"
    replace: "uses: slackapi/slack-github-action@v1.23.0"
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'echo "base_ref_branch=$(eval printf "%s" "$BASE_REF")" >> $GITHUB_OUTPUT' with 'echo "base_ref_branch=$BASE_REF" >> $GITHUB_OUTPUT'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: 'echo "base_ref_branch=$(eval printf "%s" "$BASE_REF")" >> $GITHUB_OUTPUT'
    replace: 'echo "base_ref_branch=$BASE_REF" >> $GITHUB_OUTPUT'
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'echo "head_ref_branch=$(eval printf "%s" "$HEAD_REF")" >> $GITHUB_OUTPUT' with 'echo "head_ref_branch=$HEAD_REF" >> $GITHUB_OUTPUT'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: 'echo "head_ref_branch=$(eval printf "%s" "$HEAD_REF")" >> $GITHUB_OUTPUT'
    replace: 'echo "head_ref_branch=$HEAD_REF" >> $GITHUB_OUTPUT'
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update

- name: Replace 'echo "ref_branch=$(eval printf "%s" "$REF_BRANCH")" >> $GITHUB_OUTPUT' with 'echo "ref_branch=$REF_BRANCH" >> $GITHUB_OUTPUT'
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: 'echo "ref_branch=$(eval printf "%s" "$REF_BRANCH")" >> $GITHUB_OUTPUT'
    replace: 'echo "ref_branch=$REF_BRANCH" >> $GITHUB_OUTPUT'
  loop: "{{ found_files.files }}"
  when: found_files is defined
  tags: update
