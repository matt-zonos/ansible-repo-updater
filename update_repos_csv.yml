# ansible-playbook update_repos_csv.yml
---
- name: Update repositories in a GitHub organization
  hosts: localhost
  gather_facts: false
  vars_files:
    - env.yml
  tasks:
    - name: Run get_repos_csv.py script
      ansible.builtin.command: python3 get_repos_csv.py
      environment:
        GITHUB_ORG_NAME: "{{ github_org_name }}"
        GITHUB_ACCESS_TOKEN: "{{ github_access_token }}"
      register: get_repos_csv_output
      changed_when: get_repos_csv_output.rc != 0
      tags: update_csv

    - name: Read CSV file
      community.general.read_csv:
        path: repo_list.csv
        fieldnames: repo_name,ssh_url,permission,default_branch,repo_url
      register: repo_list
      tags: csv

    - name: Filter repositories with write permissions
      ansible.builtin.set_fact:
        writable_repo_list: "{{ repo_list.list | selectattr('permission', 'equalto', 'write') | list }}"
      tags: filter_write_repos

    - name: Block
      block:
        - name: Create destination folder to store the cloned repositories
          ansible.builtin.file:
            path: "{{ dest_folder }}"
            state: directory
            mode: "0755"
          tags: clone

        - name: Clone the repositories specified in the writable_repo_list variable
          ansible.builtin.git:
            repo: "{{ item.ssh_url }}"
            dest: "{{ dest_folder }}/{{ item.repo_name }}"
            version: "{{ item.default_branch }}"
            accept_hostkey: true
          loop: "{{ writable_repo_list }}"
          register: git_result
          tags: clone_repo

        - name: Create and checkout a new branch for each repository in the writable_repo_list
          ansible.builtin.shell: |
            cd "{{ dest_folder }}/{{ item.repo_name }}"
            if git show-ref --quiet refs/heads/"{{ branch }}"; then
              echo 'Branch already exists'
            else
              git checkout -b "{{ branch }}"
              echo 'Branch created or checked out'
            fi
          register: my_output
          changed_when: "'Branch created or checked out' in my_output.stdout"
          loop: "{{ writable_repo_list }}"
          tags: checkout

        - name: Run github actions updates
          ansible.builtin.include_tasks: tasks/update_actions.yml
          tags: update

        - name: Run readme test update
          ansible.builtin.include_tasks: tasks/update_readme_test.yml
          loop: "{{ writable_repo_list }}"
          loop_control:
            index_var: item_index
          vars:
            item: "{{ 'item' }}"
          tags: update_test

        # Commit and push changes to the repository
        - name: Add, commit and push changes
          ansible.builtin.shell: |
            cd "{{ dest_folder }}/{{ item.repo_name }}"
            git add .
            git diff-index --quiet HEAD || (git commit -m "{{ github_commit_msg }}" && git push origin "{{ branch }}")
          register: git_result
          loop: "{{ writable_repo_list }}"
          changed_when: "'[new branch]' in git_result.stdout or '1 file changed' in git_result.stdout or 'files changed' in git_result.stdout"
          tags: commit_push
          ignore_errors: true

        - name: Check for existing pull requests
          ansible.builtin.shell: >
            cd "{{ dest_folder }}/{{ item.repo_name }}" &&
            GH_TOKEN="{{ github_access_token }}" gh pr list --state all
            --base "{{ item.default_branch }}" --head "{{ github_org_name }}:{{ branch }}" --json "title,url"
          register: existing_prs
          loop: "{{ writable_repo_list }}"
          changed_when: "'{{ github_commit_msg }}' not in existing_prs.stdout"
          tags: pull_request

        - name: Create pull requests and pause
          ansible.builtin.include_tasks: tasks/create_pr_and_pause.yml
          loop: "{{ existing_prs.results }}"
          loop_control:
            index_var: item_index
          vars:
            item: "{{ item }}"
          tags: pull_request

      always:
        - name: Delete destination folder
          ansible.builtin.file:
            path: "{{ dest_folder }}"
            state: absent
          tags: cleanup
